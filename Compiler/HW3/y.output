Grammar

    0 $accept: input $end

    1 input: /* empty */
    2      | input line

    3 line: '\n'
    4     | exp '\n'

    5 exp: NUM
    6    | VAR
    7    | VAR '=' exp
    8    | FUN '(' exp ')'
    9    | exp '+' exp
   10    | exp '-' exp
   11    | exp '*' exp
   12    | exp '/' exp
   13    | '(' exp ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 3 4
'(' (40) 8 13
')' (41) 8 13
'*' (42) 11
'+' (43) 9
'-' (45) 10
'/' (47) 12
'=' (61) 7
error (256)
NUM (258) 5
VAR (259) 6 7
FUN (260) 8


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
exp (15)
    on left: 5 6 7 8 9 10 11 12 13, on right: 4 7 8 9 10 11 12 13
input (16)
    on left: 1 2, on right: 0 2
line (17)
    on left: 3 4, on right: 2


state 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


state 1

    0 $accept: input . $end
    2 input: input . line

    $end  shift, and go to state 2
    NUM   shift, and go to state 3
    VAR   shift, and go to state 4
    FUN   shift, and go to state 5
    '\n'  shift, and go to state 6
    '('   shift, and go to state 7

    exp   go to state 8
    line  go to state 9


state 2

    0 $accept: input $end .

    $default  accept


state 3

    5 exp: NUM .

    $default  reduce using rule 5 (exp)


state 4

    6 exp: VAR .
    7    | VAR . '=' exp

    '='  shift, and go to state 10

    $default  reduce using rule 6 (exp)


state 5

    8 exp: FUN . '(' exp ')'

    '('  shift, and go to state 11


state 6

    3 line: '\n' .

    $default  reduce using rule 3 (line)


state 7

   13 exp: '(' . exp ')'

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 12


state 8

    4 line: exp . '\n'
    9 exp: exp . '+' exp
   10    | exp . '-' exp
   11    | exp . '*' exp
   12    | exp . '/' exp

    '-'   shift, and go to state 13
    '+'   shift, and go to state 14
    '*'   shift, and go to state 15
    '/'   shift, and go to state 16
    '\n'  shift, and go to state 17


state 9

    2 input: input line .

    $default  reduce using rule 2 (input)


state 10

    7 exp: VAR '=' . exp

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 18


state 11

    8 exp: FUN '(' . exp ')'

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 19


state 12

    9 exp: exp . '+' exp
   10    | exp . '-' exp
   11    | exp . '*' exp
   12    | exp . '/' exp
   13    | '(' exp . ')'

    '-'  shift, and go to state 13
    '+'  shift, and go to state 14
    '*'  shift, and go to state 15
    '/'  shift, and go to state 16
    ')'  shift, and go to state 20


state 13

   10 exp: exp '-' . exp

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 21


state 14

    9 exp: exp '+' . exp

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 22


state 15

   11 exp: exp '*' . exp

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 23


state 16

   12 exp: exp '/' . exp

    NUM  shift, and go to state 3
    VAR  shift, and go to state 4
    FUN  shift, and go to state 5
    '('  shift, and go to state 7

    exp  go to state 24


state 17

    4 line: exp '\n' .

    $default  reduce using rule 4 (line)


state 18

    7 exp: VAR '=' exp .
    9    | exp . '+' exp
   10    | exp . '-' exp
   11    | exp . '*' exp
   12    | exp . '/' exp

    '-'  shift, and go to state 13
    '+'  shift, and go to state 14
    '*'  shift, and go to state 15
    '/'  shift, and go to state 16

    $default  reduce using rule 7 (exp)


state 19

    8 exp: FUN '(' exp . ')'
    9    | exp . '+' exp
   10    | exp . '-' exp
   11    | exp . '*' exp
   12    | exp . '/' exp

    '-'  shift, and go to state 13
    '+'  shift, and go to state 14
    '*'  shift, and go to state 15
    '/'  shift, and go to state 16
    ')'  shift, and go to state 25


state 20

   13 exp: '(' exp ')' .

    $default  reduce using rule 13 (exp)


state 21

    9 exp: exp . '+' exp
   10    | exp . '-' exp
   10    | exp '-' exp .
   11    | exp . '*' exp
   12    | exp . '/' exp

    '*'  shift, and go to state 15
    '/'  shift, and go to state 16

    $default  reduce using rule 10 (exp)


state 22

    9 exp: exp . '+' exp
    9    | exp '+' exp .
   10    | exp . '-' exp
   11    | exp . '*' exp
   12    | exp . '/' exp

    '*'  shift, and go to state 15
    '/'  shift, and go to state 16

    $default  reduce using rule 9 (exp)


state 23

    9 exp: exp . '+' exp
   10    | exp . '-' exp
   11    | exp . '*' exp
   11    | exp '*' exp .
   12    | exp . '/' exp

    $default  reduce using rule 11 (exp)


state 24

    9 exp: exp . '+' exp
   10    | exp . '-' exp
   11    | exp . '*' exp
   12    | exp . '/' exp
   12    | exp '/' exp .

    $default  reduce using rule 12 (exp)


state 25

    8 exp: FUN '(' exp ')' .

    $default  reduce using rule 8 (exp)
